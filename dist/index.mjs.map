{"version":3,"sources":["../src/index.ts"],"sourcesContent":["type CallbackFilterFn<T> = (args: T) => boolean\n\ntype CallbackReduce<InitialType, T> = (\n  previousValue: InitialType,\n  currentValue: T,\n) => InitialType\n\ntype CallbackMap<TInput, TOutput> = (arg: TInput) => TOutput\n\nexport default class ExtendedSet<T> extends Set<T> {\n  static of<T>(anArray: T[]) {\n    return new ExtendedSet<T>(anArray)\n  }\n\n  filter(callbackFilterFn: CallbackFilterFn<T>) {\n    const filteredSet = new ExtendedSet<T>()\n    for (const item of this) {\n      if (!callbackFilterFn(item)) continue\n      filteredSet.add(item)\n    }\n    return filteredSet\n  }\n\n  reduce(callbackReduce: CallbackReduce<T, T>): T\n  reduce<InitialType>(\n    callbackReduce: CallbackReduce<InitialType, T>,\n    initialValue: InitialType,\n  ): InitialType\n  reduce(...args: any[]) {\n    const [callbackReduce, initialValue] = args\n    if (isInvalidInitialValue()) {\n      const [first, ...restSet] = this\n      return internalReduce(restSet, first)\n    }\n\n    return internalReduce(this, initialValue)\n    function isInvalidInitialValue(): boolean {\n      return initialValue === undefined || initialValue === null\n    }\n    function internalReduce(set: Set<T> | T[], initialValue: any) {\n      let result = initialValue\n      for (const item of set) {\n        result = callbackReduce(result, item)\n      }\n      return result\n    }\n  }\n\n  map<TOutput>(callback: CallbackMap<T, TOutput>) {\n    const result = new ExtendedSet<TOutput>()\n    for (const item of this) {\n      result.add(callback(item))\n    }\n    return result\n  }\n\n  isSuperSetOf<TSuperSet extends T>(other: Set<TSuperSet>): boolean {\n    for (const item of other) {\n      if (!this.has(item)) return false\n    }\n    return true\n  }\n\n  isSubSetOf(other: Set<T>): boolean {\n    for (const item of this) {\n      if (!other.has(item)) return false\n    }\n    return true\n  }\n\n  union<TSubSet extends T>(...others: Set<TSubSet>[]): ExtendedSet<T> {\n    return this._unionSets([this, ...others])\n  }\n\n  intersection<TIntersectionSet extends T>(\n    other: Set<TIntersectionSet>,\n  ): ExtendedSet<T> {\n    const intersectionSet = new ExtendedSet<T>()\n    for (const item of other) {\n      if (this.has(item)) intersectionSet.add(item)\n    }\n    return intersectionSet\n  }\n\n  difference<TDifferenceSet extends T>(\n    other: Set<TDifferenceSet>,\n  ): ExtendedSet<T> {\n    const differenceSet = new ExtendedSet<T>()\n    for (const item of other) {\n      if (!this.has(item)) differenceSet.add(item)\n    }\n    return differenceSet\n  }\n\n  toArray(): T[] {\n    return [...this]\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ExtendedSet'\n  }\n\n  toString() {\n    return [...this].join()\n  }\n\n  private _unionSets<TSubSet extends T>(others: Set<TSubSet>[]) {\n    const unionSets = new ExtendedSet<T>()\n    for (const set of others) {\n      for (const item of set) unionSets.add(item)\n    }\n    return unionSets\n  }\n}\n"],"mappings":"AASA,IAAqBA,EAArB,cAA4C,GAAO,CACjD,OAAO,GAAMC,EAAc,CACzB,OAAO,IAAID,EAAeC,CAAO,CACnC,CAEA,OAAOC,EAAuC,CAC5C,IAAMC,EAAc,IAAIH,EACxB,QAAWI,KAAQ,KACZF,EAAiBE,CAAI,GAC1BD,EAAY,IAAIC,CAAI,EAEtB,OAAOD,CACT,CAOA,UAAUE,EAAa,CACrB,GAAM,CAACC,EAAgBC,CAAY,EAAIF,EACvC,GAAIG,EAAsB,EAAG,CAC3B,GAAM,CAACC,EAAO,GAAGC,CAAO,EAAI,KAC5B,OAAOC,EAAeD,EAASD,CAAK,EAGtC,OAAOE,EAAe,KAAMJ,CAAY,EACxC,SAASC,GAAiC,CACxC,OAAqCD,GAAiB,IACxD,CACA,SAASI,EAAeC,EAAmBL,EAAmB,CAC5D,IAAIM,EAASN,EACb,QAAWH,KAAQQ,EACjBC,EAASP,EAAeO,EAAQT,CAAI,EAEtC,OAAOS,CACT,CACF,CAEA,IAAaC,EAAmC,CAC9C,IAAMD,EAAS,IAAIb,EACnB,QAAWI,KAAQ,KACjBS,EAAO,IAAIC,EAASV,CAAI,CAAC,EAE3B,OAAOS,CACT,CAEA,aAAkCE,EAAgC,CAChE,QAAWX,KAAQW,EACjB,GAAI,CAAC,KAAK,IAAIX,CAAI,EAAG,MAAO,GAE9B,MAAO,EACT,CAEA,WAAWW,EAAwB,CACjC,QAAWX,KAAQ,KACjB,GAAI,CAACW,EAAM,IAAIX,CAAI,EAAG,MAAO,GAE/B,MAAO,EACT,CAEA,SAA4BY,EAAwC,CAClE,OAAO,KAAK,WAAW,CAAC,KAAM,GAAGA,CAAM,CAAC,CAC1C,CAEA,aACED,EACgB,CAChB,IAAME,EAAkB,IAAIjB,EAC5B,QAAWI,KAAQW,EACb,KAAK,IAAIX,CAAI,GAAGa,EAAgB,IAAIb,CAAI,EAE9C,OAAOa,CACT,CAEA,WACEF,EACgB,CAChB,IAAMG,EAAgB,IAAIlB,EAC1B,QAAWI,KAAQW,EACZ,KAAK,IAAIX,CAAI,GAAGc,EAAc,IAAId,CAAI,EAE7C,OAAOc,CACT,CAEA,SAAe,CACb,MAAO,CAAC,GAAG,IAAI,CACjB,CAEA,IAAK,OAAO,WAAW,GAAI,CACzB,MAAO,aACT,CAEA,UAAW,CACT,MAAO,CAAC,GAAG,IAAI,EAAE,KAAK,CACxB,CAEQ,WAA8BF,EAAwB,CAC5D,IAAMG,EAAY,IAAInB,EACtB,QAAWY,KAAOI,EAChB,QAAWZ,KAAQQ,EAAKO,EAAU,IAAIf,CAAI,EAE5C,OAAOe,CACT,CACF","names":["ExtendedSet","anArray","callbackFilterFn","filteredSet","item","args","callbackReduce","initialValue","isInvalidInitialValue","first","restSet","internalReduce","set","result","callback","other","others","intersectionSet","differenceSet","unionSets"]}