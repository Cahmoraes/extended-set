{"version":3,"sources":["../src/index.ts"],"names":["ExtendedSet","callbackFilterFn","filteredSet","item","args","callbackReduce","initialValue","isInvalidInitialValue","first","restSet","internalReduce","set","result","callback"],"mappings":"AASA,IAAqBA,EAArB,cAA4C,GAAO,CACjD,OAAOC,EAAuC,CAC5C,IAAMC,EAAc,IAAIF,EACxB,QAAWG,KAAQ,KACZF,EAAiBE,CAAI,GAC1BD,EAAY,IAAIC,CAAI,EAEtB,OAAOD,CACT,CAOA,UAAUE,EAAa,CACrB,GAAM,CAACC,EAAgBC,CAAY,EAAIF,EACvC,GAAIG,EAAsB,EAAG,CAC3B,GAAM,CAACC,EAAO,GAAGC,CAAO,EAAI,KAC5B,OAAOC,EAAeD,EAASD,CAAK,EAGtC,OAAOE,EAAe,KAAMJ,CAAY,EACxC,SAASC,GAAiC,CACxC,OAAqCD,GAAiB,IACxD,CACA,SAASI,EAAeC,EAAmBL,EAAmB,CAC5D,IAAIM,EAASN,EACb,QAAWH,KAAQQ,EACjBC,EAASP,EAAeO,EAAQT,CAAI,EAEtC,OAAOS,CACT,CACF,CAEA,IAAaC,EAAmC,CAC9C,IAAMD,EAAS,IAAIZ,EACnB,QAAWG,KAAQ,KACjBS,EAAO,IAAIC,EAASV,CAAI,CAAC,EAE3B,OAAOS,CACT,CACF","sourcesContent":["type CallbackFilterFn<T> = (args: T) => boolean\n\ntype CallbackReduce<InitialType, T> = (\n  previousValue: InitialType,\n  currentValue: T,\n) => InitialType\n\ntype CallbackMap<TInput, TOutput> = (arg: TInput) => TOutput\n\nexport default class ExtendedSet<T> extends Set<T> {\n  filter(callbackFilterFn: CallbackFilterFn<T>) {\n    const filteredSet = new ExtendedSet<T>()\n    for (const item of this) {\n      if (!callbackFilterFn(item)) continue\n      filteredSet.add(item)\n    }\n    return filteredSet\n  }\n\n  reduce(callbackReduce: CallbackReduce<T, T>): T\n  reduce<InitialType>(\n    callbackReduce: CallbackReduce<InitialType, T>,\n    initialValue: InitialType,\n  ): InitialType\n  reduce(...args: any[]) {\n    const [callbackReduce, initialValue] = args\n    if (isInvalidInitialValue()) {\n      const [first, ...restSet] = this\n      return internalReduce(restSet, first)\n    }\n\n    return internalReduce(this, initialValue)\n    function isInvalidInitialValue(): boolean {\n      return initialValue === undefined || initialValue === null\n    }\n    function internalReduce(set: Set<T> | T[], initialValue: any) {\n      let result = initialValue\n      for (const item of set) {\n        result = callbackReduce(result, item)\n      }\n      return result\n    }\n  }\n\n  map<TOutput>(callback: CallbackMap<T, TOutput>) {\n    const result = new ExtendedSet<TOutput>()\n    for (const item of this) {\n      result.add(callback(item))\n    }\n    return result\n  }\n}\n"]}